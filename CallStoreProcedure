import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Properties;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.exception.JDBCConnectionException;
import org.hibernate.transform.Transformers;

public class CallStoreProcedure {
	public static void main(String[] args) throws IOException {		
		final Properties config = new Properties();
		try {
			//Loading default configuration
			config.load(new FileReader(new File(args[1])));
			
			//Fetching metadata for the new iot-hub
			final Session session = getSession(config);
			session.beginTransaction();
			Query procedure = session.createSQLQuery("call my_store_procudure (:param_name)")
					.setParameter("param_name", args[0]);				
			procedure.setResultTransformer(Transformers.aliasToBean(Model.class));
			List<Model> models = procedure.list();
			session.getSessionFactory().close();
			models.forEach((m) -> System.out.println(m.toString()));
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Method to start session between database and the current thread.
	 * @param config {@link Properties} instance that consist of hibernate properties as following....
	 * 		<ul>
	 * 		<li>hibernate.connection.url</li>
	 * 		<li>hibernate.connection.username</li>
	 * 		<li>hibernate.connection.password</li>
	 * 		<li>hibernate.dialect</li>
	 * 		</ul>
	 * @return currently active {@link Session}
	 * @throws JDBCConnectionException
	 */
	public static Session getSession(Properties config) throws JDBCConnectionException {
		Configuration configuration = new Configuration().setProperties(config);
		return configuration.buildSessionFactory(new StandardServiceRegistryBuilder().
				applySettings(configuration.getProperties()).build()).openSession();		 
	}
}
